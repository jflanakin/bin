#!/bin/bash

# set -x
# trap read debug

##########################################################################################
##########################################################################################
#####
#####	JSS Populator
#####	
#####	Last edited May 26th 2017 - Sam Henkes
#####   Update Feb 15 2021 - July Flanakin
##########################################################################################
##########################################################################################
#####
#####	PURPOSE: Adjusts the amount of computers, mobile devices, and users to suit the 
#####	client's needs.
#####
##########################################################################################
##########################################################################################
#####
#####	PARAMETERS: Requires an integer as a parameter to use as a ratio used in
#####	randomizing dates. The larger the number, the larger the difference between dates.
#####
##########################################################################################
##########################################################################################
#####
#####	IMPORTANT NOTES:
#####
#####	- Device names and user emails are currently being used to determine whether or
#####	not a device was generated by this script. DO NOT change the randomly generated
#####	names for the devices or the prefix for the user emails unless you also change how
#####	the scripts determines random devices/users as much of the script needs this to
#####	work properly. (If this is tampered with improperly, running the script will only
#####	generated the amount of devices/users input, as opposed to setting the amount to
#####	that number.)
#####
##########################################################################################
##########################################################################################
#####
#####	POSSIBLE TO DO'S:
#####
#####	- Change script so that instead of requiring a parameter, the client is asked for
#####	an integer to use as a ratio when needed.
#####
#####	- Implement a way to use the PUT command, changing current devices or users.
#####
#####	- Add additional details to randomly generated devices or users to be used in
#####	testing. (ie: set battery percentage or memory left)
#####
#####	- Add additional options for the client in the menu. (ie: create groups or
#####	buildings)
#####
#####	- Assign generated users devices (Could be its own command, something that occurs
#####	when users are generated, or something that occurs when devices are generated)
#####
#####	- Add additional possible area codes for randomly generated phone numbers
#####
#####	- Combine the delete functions into one or two. (May not be possible, but looks
#####	like it is.)
#####
#####	- Adjust menu to be more expandable.
#####
#####	- Create a GET command that can be adjusted to get the devices/users that the
#####	client wants.
#####
#####	- Create a menu option to display the current number of computers, mobile devices
#####	and users. (Either randomly generated amount, total amount, or both)
#####
##########################################################################################
##########################################################################################


####################################################################################################################################################################################
####################################################################################################################################################################################
#####
#####	MISCELLANEOUS FUNCTIONS - Functions to be called by other functions
#####
####################################################################################################################################################################################
####################################################################################################################################################################################

# Function added by July Flanakin
# Updates script to use modern bearer token authentication. 
getToken(){
	local jssURL
	local jssUsername
	local jssPassword
	read -p "Enter the Jamf Pro URL: " jssURL
	read -p "Enter the Jamf Pro API username: " jssUsername
	read -sp "Enter the Jamf Pro API password: " jssPassword
	local apiBasicPass=$( echo "$jssUsername:$jssPassword" | /usr/bin/iconv -t ISO-8859-1 | /usr/bin/base64 -i - )
	local getToken=$( curl -s -L -k -X POST $jssURL/api/v1/auth/token --header "Authorization: Basic $apiBasicPass" )
	authToken=$(/usr/bin/plutil -extract token raw -o - - <<< "$getToken")
}



#Verifies if binaries exist on the system we are running
commandExists () {
    type "$1" &> /dev/null ;
}


####################################################################################################################################################################################


#Generates a random number in increments of 1
#IN:	min max
#OUT:	randomNumber

generateRandom(){
	if commandExists jot ; then
    	randomNumber=$(jot -r 1 "$1" "$2")

    elif commandExists shuf; then
    	randomNumber=$(shuf -i "$1"-"$2" -n 1)

    else
    	abortCode=1
    	errorText="Unable to generate random numbers, plz install jot or shuf"
    	errorHandler "${abortCode} ${errorText}"
	fi
}


####################################################################################################################################################################################


#Generates a random name by calling on a website
#Requires NO parameters
#Should be changed if generating Users in large numbers, as this method is not very efficient

generateUserName(){
	
	userName=$(curl https://frightanic.com/goodies_content/docker-names.php)
	
}


####################################################################################################################################################################################


#Generates an email starting with the_one_and_only_ and ending with the user's name
#Requires NO parameters

generateUserEmail(){
	
	userEmail=the_one_and_only_$userName@jamf.com
	
}


####################################################################################################################################################################################


#Generates a random phone number with the area code 612
#Requires NO parameters

generatePhoneNumber(){
	
	generateRandom 0 9999999
	
	phoneNumber=612$randomNumber
	
}


####################################################################################################################################################################################


#Generates device Name taking in NO parameters
#    <name>${clientNameValue}</name>

generateName(){

	generateRandom 100000 999999
	randomNum=$randomNumber
	
	clientNameValue=device_$randomNum
	
}


####################################################################################################################################################################################


# Generates MAC address

#IN:	NO parameters
#OUT:	clientMACValue1	clientMACValue2
generateMAC(){
	clientMACValue1=$(openssl rand -hex 6)
	clientMACValue2=$(openssl rand -hex 6)
}


####################################################################################################################################################################################


# Generate an IP address
#IN:	NO Parameters
#OUT:	clientExternalIPValue	clientInternalIPValue

generateIP(){

	#creates 6 random numbers between 20 and 250
	for i in {1..6}
	do
		generateRandom 20 250	
		export r"$i"="$randomNumber"
	done


	clientExternalIPValue="$r1.$r2.$r3.$r4"
	
	clientInternalIPValue="10.11.$r5.$r6"

}


####################################################################################################################################################################################


# Generate Serial Numbers for devices
#IN:	NO parameters
#OUT: clientSerialValue

generateSerial(){
	clientSerialValue=$(openssl rand -hex 6 | awk '{print toupper($0)}' )
}


####################################################################################################################################################################################


# Generates a UUID
#IN:	taking in NO parameters
# Output 1 variable; UUID

generateUUID(){
	clientUUIDValue=$(uuidgen)
}


####################################################################################################################################################################################


# Generates Jamf Version Numbers taking in NO parameters
#	<jamf_version>${clientJamfVersionValue}</jamf_version>

generateVersion(){

	#insert address
	clientJamfVersionValue=$(curl "$jssURL" | awk  '/meta name="version"/{print $NF}' | sed 's/"//g;s/content=//g;s/>//g')

}


####################################################################################################################################################################################


# Generate a needed dates between now and an range paramenter (in DAYS)
# Output 4 date values needed for full inventory:
	#<report_date_epoch>${clientReportDate}</report_date_epoch>
    #<last_contact_time_epoch>${clientCheckinDate}</last_contact_time_epoch>
    #<initial_entry_date_epoch>${clientRecordDate}</initial_entry_date_epoch>
    #<last_enrolled_date_epoch>${clientEnrollDate}</last_enrolled_date_epoch>
    
generateDate(){
	rangeInput="$1"

#|initial_entry_date_epoch|- enrollPercentage ->|last_enrolled_date_epoch| --- |report_date_epoch|<- reportPercentage -|last_contact_time_epoch|<- contactPercentage -| NOW
	enrollPercentage=".1"
	reportPercentage=".2"
	contactPercentage=".01"

	#convert days to seconds
	rangeSeconds="$((rangeInput * 86400))"
	#Get Epoch value
	nowseconds=$(date +%s)
	#Calculate the lower bound of range epoch
	clientRecordDate=$((nowseconds-rangeSeconds))
	#Convert to milliseconds for JSS submission
	clientRecordDateValue="$((clientRecordDate * 1000))"

	enrollRange=$(echo "scale=0;$clientRecordDate+(($rangeInput*$enrollPercentage)*86400) / 1" |bc) 
	generateRandom "$clientRecordDate" "$enrollRange"
	clientEnrollDate="$randomNumber"

	reportRange=$(echo "scale=0;$nowseconds-(($rangeInput*$reportPercentage)*86400) / 1" |bc)
	generateRandom "$reportRange" "$nowseconds"
	clientReportDate="$randomNumber"

	contactRange=$(echo "scale=0;$nowseconds-(($rangeInput*$contactPercentage)*86400) / 1" |bc)
	generateRandom "$contactRange" "$nowseconds"
	clientCheckinDate="$randomNumber"



	#Convert to milliseconds for JSS submission
	clientRecordDateValue="$((clientRecordDate * 1000))"
	clientEnrollDateValue="$((clientEnrollDate * 1000))"
	clientReportDateValue="$((clientReportDate * 1000))"
	clientCheckinDateValue="$((clientCheckinDate * 1000))"

}


####################################################################################################################################################################################


# Generates Apple Computer Model Types taking in NO parameters
# Updated by July Flanakin to show modern MacOS Models that can run Monterey.
generateComputerModelIdentifier(){
	declare -a appleHardwareModels
	appleHardwareModels=(MacPro6,1 MacPro7,1 Macmini7,1 Macmini8,1 Macmini9,1 iMac16,1 iMac16,2 iMac17,1 iMac18,1 iMac18,2 iMac18,3 iMacPro1,1 iMac19,2 iMac19,1 iMac20,1 iMac20,2 iMac21,2 iMac21,1 MacBook9,1 MacBook10,1 MacBookAir7,1 MacBookAir7,2 MacBookAir7,2 MacBookAir8,1 MacBookAir8,2 MacBookAir9,1 MacBookAir10,1 MacBookPro12,1 MacBookPro11,4 MacBookPro11,5 MacBookPro13,1 MacBookPro13,2 MacBookPro13,3 MacBookPro14,1 MacBookPro14,2 MacBookPro14,3 MacBookPro15,2 MacBookPro15,1 MacBookPro15,2 MacBookPro15,1 MacBookPro15,3 MacBookPro15,4 MacBookPro16,1 MacBookPro16,4 MacBookPro16,2 MacBookPro16,3 MacBookPro17,1 MacBookPro18,1 MacBookPro18,2 MacBookPro18,3 MacBookPro18,4)
	
	arrayLength=${#appleHardwareModels[@]}
	arrayLength=$((arrayLength - 1))
	generateRandom 0 $arrayLength
	
	clientModelIdentifier=${appleHardwareModels[$randomNumber]}

}


####################################################################################################################################################################################


# Generates Apple Mobile Device Model Types taking NO parameters
# updated by July Flanakin to include iOS 15+ compatible devices
generateMobileDeviceModelIdentifier(){
	declare -a mobileHardwareModels
	mobileHardwareModels=(iPhone7,1 iPhone7,2 iPhone8,1 iPhone8,2 iPhone8,4 iPhone9,1 iPhone9,2 iPhone9,3 iPhone9,4 iPhone10,1 iPhone10,2 iPhone10,3 iPhone10,4 iPhone10,5 iPhone10,6 iPhone11,2 iPhone11,4 iPhone11,6 iPhone11,8 iPhone12,1 iPhone12,3 iPhone12,5 iPhone12,8 iPhone13,1 iPhone13,2 iPhone13,3 iPhone13,4 iPhone14,2 iPhone14,3 iPhone14,4 iPhone14,5 iPad5,2 iPad5,3 iPad5,4 iPad6,3 iPad6,4 iPad6,7 iPad6,8 iPad6,11 iPad6,12 iPad7,1 iPad7,2 iPad7,3 iPad7,4 iPad7,5 iPad7,6 iPad7,11 iPad7,12 iPad8,1 iPad8,2 iPad8,3 iPad8,4 iPad8,5 iPad8,6 iPad8,7 iPad8,8 iPad8,9 iPad8,10 iPad8,11 iPad8,12 iPad11,1 iPad11,2 iPad11,3 iPad11,4 iPad11,6 iPad11,7 iPad12,1 iPad12,2 iPad14,1 iPad14,2 iPad13,1 iPad13,2 iPad13,4 iPad13,5 iPad13,6 iPad13,7 iPad13,8 iPad13,9 iPad13,10 iPad13,11)
	
	arrayLength=${#mobileHardwareModels[@]}
	arrayLength=$((arrayLength - 1))
	generateRandom 0 $arrayLength
	
	clientModelIdentifier=${mobileHardwareModels[$randomNumber]}

}


####################################################################################################################################################################################


# Parameter : name of device
# Checks to see if the string matches the designated string pattern for random devices
# If it is a random device, isRandom will be set to 1
# Otherwise isRandom will be set to 0

ifRandom(){
	
	nam=$1
	
	isRandom=0
	
	len=${#nam}
	
	if [[ $len -eq 13 ]]
		then
			frnt=${nam:0:7}
			back=${nam:7}
			
			if [[ $frnt == "device_" ]] && [[ $back =~ ^[0-9]+$ ]]
				then
					isRandom=1
			fi
	fi
	
}


####################################################################################################################################################################################


# Parameter : name of user
# Checks to see if the string matches the designated string pattern for random users
# If it is a random device, isRandom will be set to 1
# Otherwise isRandom will be set to 0

ifRandomUser(){
	
	email=$1
	
	isRandom=0
	
	frnt=${email:0:17}
	
	if [[ $frnt == "the_one_and_only_" ]]
		then
			isRandom=1
	fi
	
}


####################################################################################################################################################################################


# Finds number of computers that are randomly generated by this script using the name
# Takes NO parameters

countRandomComputers(){
		
	randomComputerCount=0
	
	for compName in $(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/computers | xpath //computers/computer/name | sed -e 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		ifRandom "$compName"
		
		randomComputerCount="$((randomComputerCount + isRandom))"
	
	done
	
}


####################################################################################################################################################################################


# Finds number of mobile devices that are randomly generated by this script using the name
# Takes NO parameters

countRandomMobileDevices(){
		
	randomMobileDeviceCount=0
	
	for mobDevName in $(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/mobiledevices | xpath //mobile_devices/mobile_device/name | sed 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		ifRandom "$mobDevName"
		
		randomMobileDeviceCount="$((randomMobileDeviceCount + isRandom))"
	
	done
	
}


####################################################################################################################################################################################


# Finds number of users that are randomly generated by this script using the name
# Takes NO parameters

countRandomUsers(){
		
	randomUserCount=0
	
	for uName in $(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/users | xpath //users/user/name | sed -e 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		tempEmail=$(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL/JSSResource/users/name/$uName" | xpath //user/email | sed -e 's/\<email>//g;s/\<\/email>//g')
		
		ifRandomUser "$tempEmail"
		
		randomUserCount="$((randomUserCount + isRandom))"
	
	done
	
}


####################################################################################################################################################################################
####################################################################################################################################################################################
#####
#####	TEMPLATES
#####
####################################################################################################################################################################################
####################################################################################################################################################################################


computerTemplate(){


	templateData="<computer>\
  <general>\
    <name>${clientNameValue}</name>\
    <mac_address>${clientMACValue1}</mac_address>\
    <alt_mac_address>${clientMACValue2}</alt_mac_address>\
    <ip_address>${clientInternalIPValue}</ip_address>\
    <last_reported_ip>${clientExternalIPValue}</last_reported_ip>\
    <serial_number>${clientSerialValue}</serial_number>\
    <udid>${clientUUIDValue}</udid>\
    <jamf_version>${clientJamfVersionValue}</jamf_version>\
    <platform>Mac</platform>\
    <remote_management>\
      <managed>true</managed>\
      <management_username>computer1</management_username>\
      <management_password>jamf1234</management_password>\
    </remote_management>\
    <mdm_capable>true</mdm_capable>\
    <mdm_capable_users/>\
    <report_date_epoch>${clientReportDateValue}</report_date_epoch>\
    <last_contact_time_epoch>${clientCheckinDateValue}</last_contact_time_epoch>\
    <initial_entry_date_epoch>${clientRecordDateValue}</initial_entry_date_epoch>\
    <last_cloud_backup_date_epoch>${clientBackupDateValue}</last_cloud_backup_date_epoch>\
    <last_enrolled_date_epoch>${clientEnrollDateValue}</last_enrolled_date_epoch>\
  </general>\
  <hardware>\
    <make>Apple</make>\
    <model_identifier>${clientModelIdentifier}</model_identifier>\
    <os_name>Mac OS X</os_name>\
    <os_version>10.12.2</os_version>\
  </hardware>\
</computer>"
}


####################################################################################################################################################################################


mobileDeviceTemplate(){


	templateData="<mobile_device>\
  <general>\
    <name>${clientNameValue}</name>\
    <last_inventory_update_epoch>${clientCheckinDateValue}</last_inventory_update_epoch>\
    <os_type>iOS</os_type>\
    <os_version>10.0.1</os_version>\
    <serial_number>${clientSerialValue}</serial_number>\
    <udid>${clientUUIDValue}</udid>\
    <initial_entry_date_epoch>${clientRecordDateValue}</initial_entry_date_epoch>\
    <ip_address>${clientInternalIPValue}</ip_address>\
    <wifi_mac_address>${clientMACValue1}</wifi_mac_address>\
    <bluetooth_mac_address>${clientMACValue2}</bluetooth_mac_address>\
    <model_identifier>${clientModelIdentifier}</model_identifier>\
    <last_enrollment_epoch>${clientEnrollDateValue}</last_enrollment_epoch>\
    <managed>true</managed>\
    <supervised>true</supervised>\
  </general>\
</mobile_device>"
}


####################################################################################################################################################################################


userTemplate(){

	templateData="<user>\
  <name>${userName}</name>\
  <full_name>${userName}</full_name>\
  <email>${userEmail}</email>\
  <email_address>${userEmail}</email_address>\
  <phone_number>${phoneNumber}</phone_number>\
  <enable_custom_photo_url>false</enable_custom_photo_url>\
</user>"
}


####################################################################################################################################################################################
####################################################################################################################################################################################
#####
#####	JSS COMANDS (GET , POST , PUT , DELETE)
#####
####################################################################################################################################################################################
####################################################################################################################################################################################


#TO DO
#curlGETJSS(){
	
	
	
#}


####################################################################################################################################################################################


curlPOSTJSS(){

echo "${templateData}"

	curl -s -L -k -X POST "$jssURL/JSSResource$APIAddressDetails -H "Content-Type: text/xml" -H "Authorization: Bearer $authToken" -d "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>${templateData}""

}


####################################################################################################################################################################################


#TO DO
#curlPUTJSS(){
	
	
	
#}


####################################################################################################################################################################################


#WORK
curlDELETEJSS(){

	curl -s -L -k -X DELETE -H "Content-Type: text/xml" -H "Authorization: Bearer $authToken" -d "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>${templateData}" "$jssURL/JSSResource$APIAddressDetails"

}


####################################################################################################################################################################################
####################################################################################################################################################################################
#####
#####	INTERMEDIARY FUNCTIONS - called by the menu - calls miscellaneous functions
#####
#####	INCLUDES: generate, delete, delete all, set number of computers, mobile devices, and users
#####
####################################################################################################################################################################################
####################################################################################################################################################################################


# Generates x number of computers

generateComputers(){

	
	APIAddressDetails=$"/computers/id/0"

	while [[ "$numOfComputers" -gt 0 ]] && [[ "$numOfComputers" -lt 10000 ]]
	do
	
		generateName
		generateMAC
		generateIP
		generateSerial
		generateUUID
		generateVersion
		generateDate "$1"
		generateComputerModelIdentifier
		computerTemplate
		curlPOSTJSS
	
		numOfComputers="$((numOfComputers - 1))"
		
	done
	
}


####################################################################################################################################################################################


# Generates x number of mobile devices

generateMobileDevices(){
	
	
	APIAddressDetails=$"/mobiledevices/id/0"

	while [[ "$numOfDevices" -gt 0 ]] && [[ "$numOfDevices" -lt 10000 ]]
	do
	
	
		generateName
		generateMAC
		generateIP
		generateSerial
		generateUUID
		generateVersion
		generateDate "$1"
		generateMobileDeviceModelIdentifier
		mobileDeviceTemplate
		curlPOSTJSS
	
		numOfDevices="$((numOfDevices - 1))"
		
	done
	
}


####################################################################################################################################################################################


# Generates x number of users

generateUsers(){

	
	APIAddressDetails=$"/users/id/0"
	
	while [[ "$numOfUsers" -gt 0 ]] && [[ "$numOfUsers" -lt 10000 ]]
	do
	
		generateUserName
		generateUserEmail
		generatePhoneNumber
		userTemplate
		curlPOSTJSS
	
		numOfUsers="$((numOfUsers - 1))"
		
	done
	
}


####################################################################################################################################################################################


#delete x number of computers already generated by this script

deleteComputers(){
	
	
	APIAddressDetailsBase=$"/computers/name/"
	APIAddressDetails=$"/computers/name/"
	
	for compName in $(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/computers | xpath //computers/computer/name | sed -e 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		if [[ "$numOfComputers" == "0" ]]
		then
			break
		fi
		
		ifRandom "$compName"
		
		if [[ "$isRandom" == "1" ]]
		then
			APIAddressDetails=$APIAddressDetailsBase$compName
							
			curlDELETEJSS
				
			numOfComputers="$((numOfComputers - 1))"
				
		fi
		
	done
		
}


####################################################################################################################################################################################


#delete x number of mobile devices already generated by this script

deleteMobileDevices(){
	
	
	APIAddressDetailsBase=$"/mobiledevices/name/"
	APIAddressDetails=$"/mobiledevices/name/"
	
	for mobDevName in $(curl -s -L -k -X "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/mobiledevices | xpath //mobile_devices/mobile_device/name | sed -e 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		if [[ "$numOfDevices" == "0" ]]
		then
				break
		fi
		
		ifRandom "$mobDevName"
		
		if [[ "$isRandom" == "1" ]]
			then
				APIAddressDetails="$APIAddressDetailsBase$mobDevName"
							
				curlDELETEJSS
				
				numOfDevices="$((numOfDevices - 1))"
				
		fi
		
	done
		
}


####################################################################################################################################################################################


#delete x number of users already generated by this script

deleteUsers(){
	
	
	APIAddressDetailsBase=$"/users/name/"
	APIAddressDetails=$"/users/name/"
	
	for uName in $(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/users | xpath //users/user/name | sed -e 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		if (("$numOfUsers" == "0"))
			then
				break
		fi
		
		tempEmail=$(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL/JSSResource/users/name/$uName" | xpath //user/email | sed 's/\<email>//g;s/\<\/email>//g')
		
		ifRandomUser "$tempEmail"
		
		if [[ "$isRandom" == "1" ]]
			then
				APIAddressDetails="$APIAddressDetailsBase$uName"
							
				curlDELETEJSS
				
				numOfUsers="$((numOfUsers - 1))"
				
		fi
		
	done
		
}


####################################################################################################################################################################################


#delete all computers in the JSS

deleteAllComputers(){
	
	
	APIAddressDetailsBase=$"/computers/name/"
	APIAddressDetails=$"/computers/name/"
	
	for compName in $(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/computers | xpath //computers/computer/name | sed -e 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		APIAddressDetails=$APIAddressDetailsBase$compName
							
		curlDELETEJSS
		
	done
		
}


####################################################################################################################################################################################


#delete all computers in the JSS

deleteAllMobileDevices(){
	
	
	APIAddressDetailsBase=$"/mobiledevices/name/"
	APIAddressDetails=$"/mobiledevices/name/"
	
	for mobDevName in $(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/mobiledevices | xpath //mobile_devices/mobile_device/name | sed -e 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		APIAddressDetails="$APIAddressDetailsBase$mobDevName"
							
		curlDELETEJSS
		
	done
		
}


####################################################################################################################################################################################


#delete all users in the JSS

deleteAllUsers(){
	
	
	APIAddressDetailsBase=$"/users/name/"
	APIAddressDetails=$"/users/name/"
	
	for uName in $(curl -s -L -k -X -H "Accept: application/xml" -H "Authorization: Bearer $authToken" "$jssURL"/JSSResource/users | xpath //users/user/name | sed -e 's/\<name>//g;s/\<\/name//g' | tr '>' '\n'); do
		
		APIAddressDetails="$APIAddressDetailsBase$uName"
							
		curlDELETEJSS
		
	done
		
}


####################################################################################################################################################################################


#sets the number of randomly generated computers equal to the amount requested by user
#deletes or generates computers as appropriate

setComputerAmount(){
	
	echo "How many generated computers do you want to have? (Type -1 if you wish to cancel)"
	
	read -r numOfComputers
	
	if [[ "$numOfComputers" -gt -1 ]] && [[ "$numOfComputers" -lt 10000 ]]
	
		then
			countRandomComputers
			
			if [[ "$randomComputerCount" -gt "$numOfComputers" ]]
			
				then
					numOfComputers="$((randomComputerCount - numOfComputers))"
					
					deleteComputers
				
				else
					numOfComputers="$((numOfComputers - randomComputerCount))"
					
					generateComputers "$1"
				
			fi
			
		
	fi
	
}


####################################################################################################################################################################################


#sets the number of randomly generated mobile devices equal to the amount requested by user
#deletes or generates mobile devices as appropriate

setMobileDeviceAmount(){
	
	echo "How many generated mobile devices do you want to have? (Type -1 if you wish to cancel)"
	
	read -r numOfDevices
	
	if [[ "$numOfDevices" -gt -1 ]] && [[ "$numOfDevices" -lt 10000 ]]
	
		then
			countRandomMobileDevices
			
			if [[ "$randomMobileDeviceCount" -gt "$numOfDevices" ]]
			
				then
					numOfDevices="$((randomMobileDeviceCount - numOfDevices))"
					
					deleteMobileDevices
				
				else
					numOfDevices="$((numOfDevices - randomMobileDeviceCount))"
					
					generateMobileDevices "$1"
				
			fi
			
		
	fi
	
}


####################################################################################################################################################################################


#sets the number of randomly generated users equal to the amount requested by user
#deletes or generates users as appropriate

setUserAmount(){
	
	echo "How many generated users do you want to have? (Type -1 if you wish to cancel)"
	
	read -r numOfUsers
	
	if [[ "$numOfUsers" -gt -1 ]] && [[ "$numOfUsers" -lt 10000 ]]
	
		then
			countRandomUsers
			
			if [[ "$randomUserCount" -gt "$numOfUsers" ]]
			
				then
					numOfUsers="$((randomUserCount - numOfUsers))"
					
					deleteUsers
				
				else
					numOfUsers="$((numOfUsers - randomUserCount))"
					
					generateUsers
				
			fi
			
		
	fi
	
}


####################################################################################################################################################################################
####################################################################################################################################################################################
#####
#####	MENU - how the client interacts with the script
#####
####################################################################################################################################################################################
####################################################################################################################################################################################

	
#The options that the script will keep coming back to
#Requires one integer parameter as a rate for dates when generating devices

menu(){
	echo "$break"
	
	printf "What do you want to do?\n"
	printf "1: Change number of computers\n"
	printf "2: Change number of mobile devices\n"
	printf "3: Change number of users\n"
	printf "4: Delete all computers in Jamf Pro\n"
	printf "5: Delete all moblie devices in Jamf Pro\n"
	printf "6: Delete all users in Jamf Pro\n"
	printf "7: Exit\n"
		while read -r -n 1 -s answer; do
		  if [[ "$answer" = [1234567] ]]; then
		    [[ "$answer" = [1] ]] && retval=1
		    [[ "$answer" = [2] ]] && retval=2
		    [[ "$answer" = [3] ]] && retval=3
		    [[ "$answer" = [4] ]] && retval=4
		    [[ "$answer" = [5] ]] && retval=5
		    [[ "$answer" = [6] ]] && retval=6
		    [[ "$answer" = [7] ]] && retval=7
		    
		    break
		  fi
		done
	
	
	if [[ "$retval" == 7 ]]
	
		then
			printf "See you next time!\n"
			
		else
			if [[ "$retval" == 1 ]]
			
				then
					setComputerAmount "$1"
			fi
			
			if [[ "$retval" == 2 ]]
			
				then
					setMobileDeviceAmount "$1"
			fi
			
			if [[ "$retval" == 3 ]]
			
				then
					setUserAmount
			fi
			
			if [[ "$retval" == 4 ]]
			
				then
				
					echo "$break"
					
					echo -n "Are you sure you wish to delete ALL computers? (y/n)"
					while read -r -n 1 -s answer; do
		  				if [[ "$answer" = [yYnN] ]]; then
							[[ "$answer" = [yY] ]] && ans=1
	    					[[ "$answer" = [nN] ]] && ans=0
	    
	    					break
	  					fi
					done
					
					if [[ "$ans" == 1 ]]
						then
							deleteAllComputers
					fi
					
			fi
			
			if [[ "$retval" == 5 ]] 
			
				then
					
					echo "$break"
					
					echo -n "Are you sure you wish to delete ALL mobile devices? (y/n)"
					while read -r -n 1 -s answer; do
		  				if [[ "$answer" = [yYnN] ]]; then
							[[ "$answer" = [yY] ]] && ans=1
	    					[[ "$answer" = [nN] ]] && ans=0
	    
	    					break
	  					fi
					done
					
					if [[ "$ans" == 1 ]]
						then
							deleteAllMobileDevices
					fi
					
					
			fi
			
			if [[ "$retval" == 6 ]]
			
				then
				
					echo "$break"
					
					echo -n "Are you sure you wish to delete ALL users? (y/n)"
					while read -r -n 1 -s answer; do
		  				if [[ "$answer" = [yYnN] ]]; then
							[[ "$answer" = [yY] ]] && ans=1
	    					[[ "$answer" = [nN] ]] && ans=0
	    
	    					break
	  					fi
					done
					
					if [[ "$ans" == 1 ]]
						then
							deleteAllUsers
					fi
					
			fi
			
			menu "$1"
			
	fi
}

##########################################################################################
##########################################################################################

	printf "Welcome to the new JSS Populator\n"
	echo "$break"
	printf "Please enter the following authenticaiton details.\n"
	getToken
	menu "$1"


##########################################################################################
##########################################################################################

curl -s -L -X